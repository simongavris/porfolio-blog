{"id":"node_modules/decode-named-character-reference/index.js","dependencies":[{"name":"/home/simon/Playground/blog_minimum/package.json","includedInParent":true,"mtime":1649704998451},{"name":"/home/simon/Playground/blog_minimum/node_modules/decode-named-character-reference/package.json","includedInParent":true,"mtime":1649704998639},{"name":"character-entities","loc":{"line":1,"column":32,"index":32},"parent":"/home/simon/Playground/blog_minimum/node_modules/decode-named-character-reference/index.js","resolved":"/home/simon/Playground/blog_minimum/node_modules/character-entities/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeNamedCharacterReference = decodeNamedCharacterReference;\n\nvar _characterEntities = require(\"character-entities\");\n\nconst own = {}.hasOwnProperty;\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\n\nfunction decodeNamedCharacterReference(value) {\n  return own.call(_characterEntities.characterEntities, value) ? _characterEntities.characterEntities[value] : false;\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":3,"column":0}},{"name":"own","generated":{"line":10,"column":6},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":3,"column":6}},{"generated":{"line":10,"column":9},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":3,"column":9}},{"generated":{"line":10,"column":12},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":3,"column":12}},{"name":"hasOwnProperty","generated":{"line":10,"column":15},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":3,"column":15}},{"generated":{"line":10,"column":29},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":16,"column":7}},{"name":"decodeNamedCharacterReference","generated":{"line":23,"column":9},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":16,"column":16}},{"generated":{"line":23,"column":38},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":16,"column":7}},{"name":"value","generated":{"line":23,"column":39},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":16,"column":46}},{"generated":{"line":23,"column":44},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":16,"column":7}},{"generated":{"line":23,"column":46},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":16,"column":53}},{"generated":{"line":24,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":2}},{"name":"own","generated":{"line":24,"column":9},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":9}},{"generated":{"line":24,"column":12},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":12}},{"name":"call","generated":{"line":24,"column":13},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":13}},{"generated":{"line":24,"column":17},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":9}},{"name":"characterEntities","generated":{"line":24,"column":18},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":18}},{"generated":{"line":24,"column":54},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":9}},{"name":"value","generated":{"line":24,"column":56},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":37}},{"generated":{"line":24,"column":61},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":9}},{"name":"characterEntities","generated":{"line":24,"column":65},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":46}},{"name":"value","generated":{"line":24,"column":102},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":64}},{"generated":{"line":24,"column":107},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":46}},{"generated":{"line":24,"column":108},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":9}},{"generated":{"line":24,"column":111},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":73}},{"generated":{"line":24,"column":116},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":17,"column":2}},{"generated":{"line":25,"column":0},"source":"node_modules/decode-named-character-reference/index.js","original":{"line":18,"column":1}}],"sources":{"node_modules/decode-named-character-reference/index.js":"import {characterEntities} from 'character-entities'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false\n}\n"},"lineCount":null}},"error":null,"hash":"3ce36078d639d77daf408f852e3abeee","cacheData":{"env":{}}}